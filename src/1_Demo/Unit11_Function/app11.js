console.log("Unit 11: Function");

/**I.C·∫§U TR√öC
 * function + <functionName>(parameter){
 *      state;
 *      return: c√≥ th·ªÉ c√≥ ho·∫∑c kh√¥ng 
 *      (c√¢u l·ªánh cu·ªëi trong h√†m m√† l√† console.log() th√¨ ko n√™n d√πng)
 * }
 * 
 * C√°ch th·ª•c thi:
 * g·ªçi t√™n Function:  <functionName>();
 */

//V√≠ d·ª•: Build function calculate sum: a + b;

//1.build:
function calSum(a, b) {
    return a + b;
}

//2.call/invoke: l∆∞u √Ω: g·ªçi h√†m b·∫±ng console.log() m√† ko c√≥ return th√¨ s·∫Ω b·ªã underfine nh√©!(ch√∫ √Ω)

console.log(calSum(6, 10));//16

// =====================================================================
/**
 * II.Parameters and Arguments
 * 
 * Parameters: tham s·ªë build trong h√†m
 * Arguments: ƒê·ªëi s·ªë gi√° tr·ªã truy·ªÅn v√†o h√†m
 */

//1.v√≠ d·ª•:

function fullName(fisrtName, lastName) {
    console.log("Full Name: ", fisrtName + lastName);
}

fullName("Ki√™n", "Trinh");

//parameter l√†: (fisrtName, lastName)
//arguments l√†: ("Ki√™n", "Trinh").


//===============================================================
/**
 * III.Trong gi·ªõi h·∫°n data types truy·ªÅn v√†o function.
 * 
 * truy·ªÅn s·ªë
 * 
 * truy·ªÅn string
 * 
 * ƒë·ªÅu ƒëc
 */

//1.V√≠ d·ª•:
console.log(calSum("Beck", "Kham"));//BeckKham
console.log("\n\n")
fullName(1, 2);//Full Name: 3


//==================================================================
/**
 * IV. L·ªÜNH return
 *  X√°c ƒë·ªãnh h√†m tr·∫£ v·ªÅ gi√° tr·ªã g√¨: ƒë∆°n gi·∫£n, ph√∫c t·∫°p,
 *  Trong h√†m m√† g·∫∑p c√¢u l·ªánh return ·ªü ƒë√¢u th√¨ h√†m s·∫Ω d·ª´ng lu√¥n, mu·ªën d√πng l·∫°i th√¨ ph·∫£i g·ªçi l·∫°i h√†m
 *
 *
 * l∆∞u √Ω:ƒë√©o d√πng return n·∫øu k·∫øt th√∫c h√†m l√† consolelog()nh√©!
 * d√πng th√¨ l√† n√≥ return void() nh√©, m√† tr√™n tab console s·∫Ω hi·ªán underfine.
 */



//===================================================================
/**
 * V,OverLoad (n·∫°p ch·ªìng ph∆∞∆°ng th·ª©c), Overide(Ghi ƒë√® ph∆∞∆°ng th·ª©c)
 * 
 * 1. Overload (N·∫°p ch·ªìng ph∆∞∆°ng th·ª©c) ko c√≥ th·∫≠t trong JS
 Kh√°i ni·ªám:

L√† vi·ªác c√πng m·ªôt t√™n h√†m, nh∆∞ng kh√°c danh s√°ch tham s·ªë (s·ªë l∆∞·ª£ng, ki·ªÉu d·ªØ li·ªáu ho·∫∑c th·ª© t·ª±).

 Di·ªÖn ra trong c√πng 1 class.

 2. Override (Ghi ƒë√® ph∆∞∆°ng th·ª©c) c√≥ trong javascript
 Kh√°i ni·ªám:

L√† vi·ªác l·ªõp con ƒë·ªãnh nghƒ©a l·∫°i ph∆∞∆°ng th·ª©c c·ªßa l·ªõp cha, gi·ªØ nguy√™n t√™n, ki·ªÉu tr·∫£ v·ªÅ, v√† tham s·ªë,
nh∆∞ng thay ƒë·ªïi ph·∫ßn th√¢n h√†m (logic).

 Di·ªÖn ra gi·ªØa 2 class c√≥ quan h·ªá k·∫ø th·ª´a (extends).
 */

class Animal {
    sound() {
        console.log("Animal sound");
    }
}

class Dog extends Animal {
    sound() {
        console.log("Dog barks");
    }
}

const dog = new Dog();
dog.sound(); // üëâ "Dog barks"

//3.ƒê·ªãnh nghƒ©a h√†m trong h√†m:
function showMessage() {
    function showMessage2() {
        console.log('Message 2');
    }

    showMessage2();
}
showMessage();